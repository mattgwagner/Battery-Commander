@model ABCP

@Html.ActionLink("Back to ABCP", "Index", "ABCP")

@if (Model.RequiresTape && !Model.Measurements.Any())
{
    <div class="alert alert-danger">
        Soldier requires taping. Please @Html.ActionLink("add measurements", "Measurements", new { Model.Id }, new { @class = "btn btn-danger" })
    </div>
}

@if (!Model.AreMeasurementsValid)
{
    <div class="alert alert-danger">
        @Html.ActionLink("Measurements", "Measurements", "ABCP", new { Model.Id }, new { @class = "btn btn-link" }) are outside of tolerance (i.e. greater than 1 inch difference!). Please revisit your taping measurements before continuing.
    </div>
}
else if (Model.Measurements.Any())
{
    @Html.ActionLink("Generate Worksheet", "Worksheet", "ABCP", new { Model.Id }, new { @class = "btn btn-default" })
    @Html.ActionLink("Generate Counseling", "Counseling", "ABCP", new { Model.Id }, new { @class = "btn btn-default" })
    @Html.ActionLink("Edit Measurements", "Measurements", "ABCP", new { Model.Id }, new { @class = "btn btn-default" })
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h1 class="panel-title">ABCP for @Model.Soldier on @Html.DisplayFor(model => model.Date)</h1>
    </div>

    @if (!Model.Soldier.HasDoB)
    {
        <div class="alert alert-danger">Soldier has invalid Date of Birth!</div>
    }

    <h3><a href="http://www.armyg1.army.mil/hr/bodyComposition/docs/AR600_9_28-June-2013.pdf">AR 600-9 The Army Body Composition Program</a></h3>

    <table class="table table-bordered">
        @if (Model.IsSatisfactory.HasValue)
        {
            <tr>
                <td>@Html.DisplayNameFor(model => model.IsSatisfactory)</td>
                <td>
                    @if(Model.IsSatisfactory == true)
                    {
                        <span class="alert alert-success">Satifactory</span>
                    }
                    else if(Model.IsSatisfactory == false)
                    {
                        <span class="alert alert-warning">Unsatisfactory</span>
                    }
                </td>
            </tr>
        }
        <tr>
            <td>@Html.DisplayNameFor(model => model.Soldier)</td>
            <td>@Html.DisplayFor(model => model.Soldier)</td>
        </tr>
        <tr>
            <td>@Html.DisplayNameFor(model => model.IsPassing)</td>
            <td>@Html.DisplayFor(model => model)</td>
        </tr>
        <tr>
            <td>@Html.DisplayNameFor(model => model.Age)</td>
            <td>@Html.DisplayFor(model => model.Age)</td>
        </tr>
        <tr>
            <td>@Html.DisplayNameFor(model => model.Height)</td>
            <td>@Html.DisplayFor(model => model.Height)</td>
        </tr>
        <tr>
            <td>@Html.DisplayNameFor(model => model.Weight)</td>
            <td>@Html.DisplayFor(model => model.Weight)</td>
        </tr>
        <tr>
            <td>@Html.DisplayNameFor(model => model.Screening_Weight)</td>
            <td>@Html.DisplayFor(model => model.Screening_Weight)</td>
        </tr>
        @if (Model.Measurements.Any())
        {
            <tr>
                <td>@Html.DisplayNameFor(model => model.CircumferenceValue)</td>
                <td>@Html.DisplayFor(model => model.CircumferenceValue)</td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.BodyFatPercentage)</td>
                <td>@Html.DisplayFor(model => model.BodyFatPercentage)
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.MaximumAllowableBodyFat)</td>
                <td>@Html.DisplayFor(model => model.MaximumAllowableBodyFat)
            </tr>
        }
        <tr>
            <td>@Html.DisplayNameFor(model => model.RequiresTape)</td>
            <td>
                @if (!Model.RequiresTape)
                {
                    <span class="label label-success">Nope</span>
                }
                else
                {
                    <span class="label label-danger">Requires Tape</span>
                }
            </td>
        </tr>

        @foreach (var measurement in Model.Measurements)
        {
            <tr>
                <td colspan="2">
                    <ul>
                        <li>@Html.DisplayNameFor(_ => measurement.Neck): @Html.DisplayFor(_ => measurement.Neck)</li>
                        <li>@Html.DisplayNameFor(_ => measurement.Waist): @Html.DisplayFor(_ => measurement.Waist)</li>
                        @if (Model.Soldier.Gender == Gender.Female)
                        {
                            <li>@Html.DisplayNameFor(_ => measurement.Hips): @Html.DisplayFor(_ => measurement.Hips)</li>
                        }
                    </ul>
                </td>
            </tr>
        }
    </table>
</div>

<div>
    @using (Html.BeginForm("Delete", "ABCP", new { Model.Id }, FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this?')">Delete</button>
    }
</div>